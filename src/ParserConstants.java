/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LET = 7;
  /** RegularExpression Id. */
  int PRINT = 8;
  /** RegularExpression Id. */
  int TOSTRING = 9;
  /** RegularExpression Id. */
  int LEN = 10;
  /** RegularExpression Id. */
  int IN = 11;
  /** RegularExpression Id. */
  int END = 12;
  /** RegularExpression Id. */
  int FUN = 13;
  /** RegularExpression Id. */
  int R_ARROW = 14;
  /** RegularExpression Id. */
  int COMMA = 15;
  /** RegularExpression Id. */
  int D_EQ = 16;
  /** RegularExpression Id. */
  int EQ = 17;
  /** RegularExpression Id. */
  int ATTRIB = 18;
  /** RegularExpression Id. */
  int NEW = 19;
  /** RegularExpression Id. */
  int DERREF = 20;
  /** RegularExpression Id. */
  int N_EQ = 21;
  /** RegularExpression Id. */
  int L_SQ_BRCKT = 22;
  /** RegularExpression Id. */
  int R_SQ_BRCKT = 23;
  /** RegularExpression Id. */
  int BOOL_TYPE = 24;
  /** RegularExpression Id. */
  int INT_TYPE = 25;
  /** RegularExpression Id. */
  int REF_TYPE = 26;
  /** RegularExpression Id. */
  int Bool = 27;
  /** RegularExpression Id. */
  int STRING_TYPE = 28;
  /** RegularExpression Id. */
  int DOUBLE_TYPE = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int THEN = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int WHILE = 33;
  /** RegularExpression Id. */
  int DO = 34;
  /** RegularExpression Id. */
  int FOR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int GREATER_EQ = 39;
  /** RegularExpression Id. */
  int LOWER_EQ = 40;
  /** RegularExpression Id. */
  int LOWER = 41;
  /** RegularExpression Id. */
  int GREATER = 42;
  /** RegularExpression Id. */
  int DOT = 43;
  /** RegularExpression Id. */
  int D_DOTS = 44;
  /** RegularExpression Id. */
  int ID = 45;
  /** RegularExpression Id. */
  int Num = 46;
  /** RegularExpression Id. */
  int Double = 47;
  /** RegularExpression Id. */
  int PLUS = 48;
  /** RegularExpression Id. */
  int MINUS = 49;
  /** RegularExpression Id. */
  int TIMES = 50;
  /** RegularExpression Id. */
  int DIV = 51;
  /** RegularExpression Id. */
  int MOD = 52;
  /** RegularExpression Id. */
  int LPAR = 53;
  /** RegularExpression Id. */
  int RPAR = 54;
  /** RegularExpression Id. */
  int SEMI_COLON = 55;
  /** RegularExpression Id. */
  int EL = 56;
  /** RegularExpression Id. */
  int STRING = 57;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 6>",
    "\"let\"",
    "\"println\"",
    "\"toString\"",
    "\"#\"",
    "\"in\"",
    "\"end\"",
    "\"fun\"",
    "<R_ARROW>",
    "\",\"",
    "\"==\"",
    "\"=\"",
    "\":=\"",
    "\"new\"",
    "\"!\"",
    "\"!=\"",
    "\"[\"",
    "\"]\"",
    "<BOOL_TYPE>",
    "<INT_TYPE>",
    "<REF_TYPE>",
    "<Bool>",
    "<STRING_TYPE>",
    "<DOUBLE_TYPE>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"~\"",
    "\"&&\"",
    "\"||\"",
    "\">=\"",
    "\"<=\"",
    "\"<\"",
    "\">\"",
    "\".\"",
    "\":\"",
    "<ID>",
    "<Num>",
    "<Double>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\";;\"",
    "<STRING>",
  };

}
