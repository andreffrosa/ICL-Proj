/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int TIMES = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int NUMBER = 10;
  /** RegularExpression Id. */
  int DIGITS = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int TRUE = 13;
  /** RegularExpression Id. */
  int FALSE = 14;
  /** RegularExpression Id. */
  int OPEN_PAR = 15;
  /** RegularExpression Id. */
  int CLOSE_PAR = 16;
  /** RegularExpression Id. */
  int LET = 17;
  /** RegularExpression Id. */
  int IN = 18;
  /** RegularExpression Id. */
  int END = 19;
  /** RegularExpression Id. */
  int FUN = 20;
  /** RegularExpression Id. */
  int FUN_DEF = 21;
  /** RegularExpression Id. */
  int COMMA = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int THEN = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int WHILE = 26;
  /** RegularExpression Id. */
  int DO = 27;
  /** RegularExpression Id. */
  int REFERENCE = 28;
  /** RegularExpression Id. */
  int ID = 29;
  /** RegularExpression Id. */
  int EQUAL = 30;
  /** RegularExpression Id. */
  int DIFFERENT = 31;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 32;
  /** RegularExpression Id. */
  int LESSER_EQUAL = 33;
  /** RegularExpression Id. */
  int GREATER = 34;
  /** RegularExpression Id. */
  int LESSER = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int NOT = 38;
  /** RegularExpression Id. */
  int IS = 39;
  /** RegularExpression Id. */
  int ASSIGN = 40;
  /** RegularExpression Id. */
  int DEREFERENCE = 41;
  /** RegularExpression Id. */
  int EXP_END = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<NUMBER>",
    "<DIGITS>",
    "<BOOLEAN>",
    "\"true\"",
    "\"false\"",
    "\"(\"",
    "\")\"",
    "\"let\"",
    "\"in\"",
    "\"end\"",
    "\"fun\"",
    "\"=>\"",
    "\",\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"new\"",
    "<ID>",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"||\"",
    "\"&&\"",
    "\"~\"",
    "\"=\"",
    "\":=\"",
    "\"!\"",
    "\";;\"",
  };

}
