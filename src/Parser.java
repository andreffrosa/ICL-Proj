/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleEntry;


import ast.ASTAnd;
import ast.ASTApply;
import ast.ASTAssign;
import ast.ASTBool;
import ast.ASTDiv;
import ast.ASTEq;
import ast.ASTMult;
import ast.ASTNode;
import ast.ASTNot;
import ast.ASTNum;
import ast.ASTDouble;
import ast.ASTOr;
import ast.ASTAdd;
import ast.ASTPrintln;
import ast.ASTToString;
import ast.ASTLen;
import ast.ASTSeq;
import ast.ASTString;
import ast.ASTSub;
import ast.ASTNeg;
import ast.ASTNeq;
import ast.ASTId;
import ast.ASTIf;
import ast.ASTLet;
import ast.ASTMod;
import ast.ASTLess;
import ast.ASTLessEq;
import ast.ASTFun;
import ast.ASTGreater;
import ast.ASTGreaterEq;
import ast.ASTWhile;
import ast.ASTFor;
import ast.ASTDerref;
import ast.ASTNew;
import ast.ASTStruct;
import ast.ASTStructDeref;
import ivalues.IValue;
import itypes.*;
import environment.*;
import compiler.Compiler;

/** ID lister. */
public class Parser implements ParserConstants {

    private static void interpret(InputStream inputStream) {
        Parser parser = new Parser(inputStream);

        while(true) {
            try {
                ASTNode exp = parser.Start();
                Environment<IValue> globalEnv = new EnvironmentClass<IValue>();
                Environment<IType> typeEnv = new EnvironmentClass<IType>();
                Environment<String> frameEnv =  new EnvironmentClass<String>();

                exp.typecheck(typeEnv);
                System.out.println( exp.eval(globalEnv) );

                Compiler.emitAndDumpProgram(exp.compile(frameEnv), "Prog");

                if(tokenImage[0].equals("<EOF>") && inputStream != System.in) {
                    return;
                }
            } catch (ParseException e) {
                System.out.println(e);
                parser.ReInit(inputStream);
            }
        }
    }

    /** Main entry point. */
    public static void main(String args[]) {

        if(args.length > 0) {
            String fileName = args[0];
            try {
                InputStream inputStream = new FileInputStream(new File(fileName));
                interpret(inputStream);
            } catch (FileNotFoundException e) {
                System.out.println("No such file!");
            }
        } else {
            interpret(System.in);
        }
    }

  static final public ASTNode Start() throws ParseException {
  ASTNode t;
    t = Multiple_Exp();
    jj_consume_token(EL);
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Multiple_Exp() throws ParseException {
  ASTNode t, t2;
    t = Exp();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI_COLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMI_COLON);
      t2 = Exp();
        t = new ASTSeq(t, t2);
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  ASTNode t1, t2;
  Token op;
    t1 = Clause();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        op = jj_consume_token(AND);
        break;
      case OR:
        op = jj_consume_token(OR);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Clause();
        switch(op.kind) {
          case AND: t1 = new ASTAnd(t1, t2); break;
          case OR: t1 = new ASTOr(t1, t2); break;
          }
    }
   {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Clause() throws ParseException {
  ASTNode t;
    t = EArithmetic();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case D_EQ:
    case N_EQ:
    case GREATER_EQ:
    case LOWER_EQ:
    case LOWER:
    case GREATER:
      t = Comp(t);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Comp(ASTNode t1) throws ParseException {
  Token op;
  ASTNode t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case D_EQ:
      op = jj_consume_token(D_EQ);
      break;
    case N_EQ:
      op = jj_consume_token(N_EQ);
      break;
    case GREATER:
      op = jj_consume_token(GREATER);
      break;
    case LOWER:
      op = jj_consume_token(LOWER);
      break;
    case GREATER_EQ:
      op = jj_consume_token(GREATER_EQ);
      break;
    case LOWER_EQ:
      op = jj_consume_token(LOWER_EQ);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t2 = EArithmetic();
                        switch(op.kind) {
                          case D_EQ: t1 = new ASTEq(t1, t2); break;
                          case N_EQ: t1 = new ASTNeq(t1, t2); break;
                          case GREATER: t1 = new ASTGreater(t1, t2); break;
                          case LOWER: t1 = new ASTLess(t1, t2); break;
                          case GREATER_EQ: t1 = new ASTGreaterEq(t1, t2); break;
                          case LOWER_EQ: t1 = new ASTLessEq(t1, t2); break;
                          }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode EArithmetic() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = EArithmetic();
                        if (op.kind == PLUS)
                                t1 = new ASTAdd(t1,t2);
                else
                        t1 = new ASTSub(t1,t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
        Token op;
        ASTNode t1, t2;
        List<ASTNode> args;
    t1 = Fact();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      args = ArgList();
      jj_consume_token(RPAR);
                                      t1 = new ASTApply(t1, args);
      break;
    case ATTRIB:
      jj_consume_token(ATTRIB);
      t2 = Exp();
                                t1 = new ASTAssign(t1, t2);
      break;
    default:
      jj_la1[9] = jj_gen;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
        case DIV:
        case MOD:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          op = jj_consume_token(TIMES);
          break;
        case DIV:
          op = jj_consume_token(DIV);
          break;
        case MOD:
          op = jj_consume_token(MOD);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = Fact();
                switch(op.kind) {
                  case TIMES: t1 = new ASTMult(t1, t2); break;
                  case DIV: t1 = new ASTDiv(t1, t2); break;
                  case MOD: t1 = new ASTMod(t1, t2); break;
                  }
      }
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public IType Type() throws ParseException {
    IType t;
    List<IType> paramTypes = new LinkedList<IType>();
    List<Entry<String, IType>> entryTypes = new LinkedList<Entry<String, IType>>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TYPE:
      jj_consume_token(INT_TYPE);
          {if (true) return IntType.getInstance();}
      break;
    case BOOL_TYPE:
      jj_consume_token(BOOL_TYPE);
          {if (true) return BoolType.getInstance();}
      break;
    case REF_TYPE:
      jj_consume_token(REF_TYPE);
      t = Type();
          {if (true) return new RefType(t);}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_SQ_BRCKT:
      case BOOL_TYPE:
      case INT_TYPE:
      case REF_TYPE:
      case LPAR:
        t = Type();
                             paramTypes.add(t);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          t = Type();
                                                                      paramTypes.add(t);
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      t = Type();
          {if (true) return new FunType(paramTypes, t);}
      break;
    case L_SQ_BRCKT:
      jj_consume_token(L_SQ_BRCKT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_SQ_BRCKT:
      case BOOL_TYPE:
      case INT_TYPE:
      case REF_TYPE:
      case LPAR:
        t = Type();
                                    entryTypes.add(new SimpleEntry<String, IType>("", t));
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          t = Type();
                                                                                                                   entryTypes.add(new SimpleEntry<String, IType>("", t));
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(R_SQ_BRCKT);
          {if (true) return new StructType(entryTypes);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Entry<String, IType> TypeAssoc() throws ParseException {
    Token id;
    IType t;
    id = jj_consume_token(ID);
    jj_consume_token(D_DOTS);
    t = Type();
      {if (true) return new SimpleEntry<String, IType>(id.image, t);}
    throw new Error("Missing return statement in function");
  }

  static final public List<ASTNode> ArgList() throws ParseException {
  ASTNode t;
  List<ASTNode> list = new LinkedList<ASTNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
    case PRINT:
    case TOSTRING:
    case LEN:
    case FUN:
    case NEW:
    case DERREF:
    case L_SQ_BRCKT:
    case Bool:
    case IF:
    case WHILE:
    case FOR:
    case NOT:
    case ID:
    case Num:
    case Double:
    case MINUS:
    case LPAR:
    case STRING:
      t = Exp();
             list.add(t);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        t = Exp();
                                             list.add(t);
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public Map<Entry<String, IType>, ASTNode> Declarations() throws ParseException {
  ASTNode t;
  Entry<String, IType> e;
  Map<Entry<String, IType>, ASTNode> decls = new HashMap<Entry<String, IType>, ASTNode>();
    e = TypeAssoc();
    jj_consume_token(EQ);
    t = Exp();
                                   decls.put(e, t);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      e = TypeAssoc();
      jj_consume_token(EQ);
      t = Exp();
                                                                                              decls.put(e, t);
    }
    {if (true) return decls;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Entry<Entry<String, IType>, ASTNode>> OrderedDeclarations() throws ParseException {
  ASTNode t;
  Entry<String, IType> e;
  List<Entry<Entry<String, IType>, ASTNode>> decls = new LinkedList();
    e = TypeAssoc();
    jj_consume_token(EQ);
    t = Exp();
                                   decls.add(new SimpleEntry<Entry<String, IType>, ASTNode>(e, t));
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      e = TypeAssoc();
      jj_consume_token(EQ);
      t = Exp();
                                                                                                                                               decls.add(new SimpleEntry<Entry<String, IType>, ASTNode>(e, t));
    }
    {if (true) return decls;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Entry<String, IType>> ParamList() throws ParseException {
  Entry<String, IType> e;
  List<Entry<String, IType>> list = new LinkedList<Entry<String, IType>>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      e = TypeAssoc();
                     list.add(e);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        e = TypeAssoc();
                                                             list.add(e);
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {
  Token n, m;
  ASTNode t1, t2, t3;
  List<Entry<String, IType>> params;
  Map<Entry<String, IType>, ASTNode> decls;
  List<Entry<Entry<String, IType>, ASTNode>> orderedDecls;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
                t1 = new ASTNum(Integer.parseInt(n.image));
      break;
    case Double:
      n = jj_consume_token(Double);
                   t1 = new ASTDouble(java.lang.Double.valueOf(n.image.replace(",", ".")));
      break;
    case STRING:
      n = jj_consume_token(STRING);
                   t1 = new ASTString(n.image.substring(1, n.image.length()-1));
      break;
    case ID:
      n = jj_consume_token(ID);
               t1 = new ASTId(n.image);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
        jj_consume_token(DOT);
        m = jj_consume_token(ID);
                                                          t1 = new ASTStructDeref(t1, m.image);
      }
      break;
    case Bool:
      n = jj_consume_token(Bool);
                 t1 = new ASTBool(Boolean.parseBoolean(n.image));
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(LPAR);
      t1 = Exp();
      jj_consume_token(RPAR);
                                      t1 = new ASTPrintln(t1);
      break;
    case TOSTRING:
      jj_consume_token(TOSTRING);
      jj_consume_token(LPAR);
      t1 = Exp();
      jj_consume_token(RPAR);
                                         t1 = new ASTToString(t1);
      break;
    case LEN:
      jj_consume_token(LEN);
      t1 = Exp();
                       t1 = new ASTLen(t1);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t1 = Multiple_Exp();
      jj_consume_token(RPAR);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t1 = Fact();
                          t1 = new ASTNeg(t1);
      break;
    case NOT:
      jj_consume_token(NOT);
      t1 = Fact();
                        t1 = new ASTNot(t1);
      break;
    case LET:
      jj_consume_token(LET);
      decls = Declarations();
      jj_consume_token(IN);
      t2 = Multiple_Exp();
      jj_consume_token(END);
                                                                  t1 = new ASTLet(decls,t2);
      break;
    case L_SQ_BRCKT:
      jj_consume_token(L_SQ_BRCKT);
      orderedDecls = OrderedDeclarations();
      jj_consume_token(R_SQ_BRCKT);
                                                                       t1 = new ASTStruct(orderedDecls);
      break;
    case FUN:
      jj_consume_token(FUN);
      params = ParamList();
      jj_consume_token(R_ARROW);
      t2 = Multiple_Exp();
      jj_consume_token(END);
                                                                   t1 = new ASTFun(params, t2);
      break;
    case NEW:
      jj_consume_token(NEW);
      t1 = Fact();
                        t1 = new ASTNew(t1);
      break;
    case DERREF:
      jj_consume_token(DERREF);
      t1 = Fact();
                               t1 = new ASTDerref(t1);
      break;
    case IF:
      jj_consume_token(IF);
      t1 = Multiple_Exp();
      jj_consume_token(THEN);
      t2 = Multiple_Exp();
      jj_consume_token(ELSE);
      t3 = Multiple_Exp();
      jj_consume_token(END);
                                                                                           t1 = new ASTIf(t1, t2, t3);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      t1 = Multiple_Exp();
      jj_consume_token(DO);
      t2 = Multiple_Exp();
      jj_consume_token(END);
                                                                   t1 = new ASTWhile(t1, t2);
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(LPAR);
      decls = Declarations();
      jj_consume_token(SEMI_COLON);
      t1 = Exp();
      jj_consume_token(SEMI_COLON);
      t2 = Exp();
      jj_consume_token(RPAR);
      jj_consume_token(IN);
      t3 = Multiple_Exp();
      jj_consume_token(END);
                                                                                                                              t1= new ASTFor(decls, t1, t2, t3);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x210000,0x210000,0x0,0x0,0x0,0x0,0x40000,0x8000,0x7400000,0x8000,0x7400000,0x7400000,0x8000,0x98582780,0x8000,0x8000,0x8000,0x0,0x0,0x98582780,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200000,0x18,0x18,0x1e0,0x1e0,0xc000,0xc000,0x70000,0x70000,0x80000,0x0,0x80000,0x0,0x80000,0x80000,0x0,0x88b806,0x0,0x0,0x0,0x800,0x200,0x88b806,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
