//options {DEBUG_PARSER=true; }

PARSER_BEGIN(Parser)
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleEntry;


import ast.ASTAnd;
import ast.ASTApply;
import ast.ASTAssign;
import ast.ASTBool;
import ast.ASTDiv;
import ast.ASTEq;
import ast.ASTMult;
import ast.ASTNode;
import ast.ASTNot;
import ast.ASTNum;
import ast.ASTOr;
import ast.ASTPlus;
import ast.ASTPrintln;
import ast.ASTSeq;
import ast.ASTSub;
import ast.ASTNeg;
import ast.ASTNeq;
import ast.ASTId;
import ast.ASTIf;
import ast.ASTLet;
import ast.ASTMod;
import ast.ASTLess;
import ast.ASTLessEq;
import ast.ASTFun;
import ast.ASTGreater;
import ast.ASTGreaterEq;
import ast.ASTWhile;
import ast.ASTFor;
import ast.ASTDerref;
import ast.ASTNew;
import ivalues.IValue;
import itypes.*;
import environment.Environment;
import environment.EnvironmentClass;
import environment.FrameEnvironment;
import environment.FrameEnvironmentClass;
import compiler.Compiler;

/** ID lister. */
public class Parser {

    private static void interpret(InputStream inputStream) {
        Parser parser = new Parser(inputStream);

        while(true) {
            try {
                ASTNode exp = parser.Start();
                Environment<IValue> globalEnv = new EnvironmentClass<IValue>();
                Environment<IType> typeEnv = new EnvironmentClass<IType>();
                FrameEnvironment frameEnv =  new FrameEnvironmentClass();

                exp.typecheck(typeEnv);
                System.out.println( exp.eval(globalEnv) );

                Compiler.emitAndDumpProgram(exp.compile(frameEnv), "Prog");

                if(tokenImage[0].equals("<EOF>") && inputStream != System.in) {
                    return;
                }
            } catch (ParseException e) {
                System.out.println(e);
                parser.ReInit(inputStream);
            }
        }
    }

    /** Main entry point. */
    public static void main(String args[]) {

        if(args.length > 0) {
            String fileName = args[0];
            try {
                InputStream inputStream = new FileInputStream(new File(fileName));
                interpret(inputStream);
            } catch (FileNotFoundException e) {
                System.out.println("No such file!");
            }
        } else {
            interpret(System.in);
        }
    }
}

PARSER_END(Parser)

SKIP :
{ <"//"(~["\r", "\n"])*> | " " | "\t" | "\r" | "\n" | <"/*" (["a"-"z","A"-"Z","0"-"9", " ","\t","\r","\n"])* "*/"> }

TOKEN :
{
    < LET : "let" >
  | < PRINT : "println" >
  | < IN : "in" >
  | < END : "end" >
  | < FUN : "fun" >
  | < R_ARROW : ("->" | "=>") >
  | < COMMA : "," >
  | < D_EQ: "==" >
  | < EQ: "=" >
  | < ATTRIB : ":=" >
  | < NEW : "new" >
  | < DERREF : "!" >
  | < N_EQ: "!=" >
  | < BOOL_TYPE : ("B"|"b")"ool" >
  | < INT_TYPE : ("I"|"i")"nt" >
  | < REF_TYPE : ("R"|"r")"ef" >
  | < Bool: ( ("T"|"t")"rue" | ("F"|"f")"alse") >
  | < IF : "if" >
  | < THEN : "then" >
  | < ELSE : "else" >
  | < WHILE : "while" >
  | < DO : "do" >
  | < FOR : "for" >
  | < NOT : "~" >
  | < AND : "&&" >
  | < OR : "||" >
  | < GREATER_EQ : ">=" >
  | < LOWER_EQ : "<=" >
  | < LOWER : "<" >
  | < GREATER : ">" >
  | < D_DOTS : ":" >
  | < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  | < Num: (["0"-"9"])+ >
  | < PLUS : "+" >
  | < MINUS : "-">
  | < TIMES : "*">
  | < DIV : "/">
  | < MOD : "%">
  | < LPAR : "(" >
  | < RPAR : ")" >
  | < SEMI_COLON: ";" >
  | < EL: ";;" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Multiple_Exp() <EL>
   { return t; }
}

ASTNode Multiple_Exp():
{ ASTNode t, t2;}
{
  t = Exp() ( <SEMI_COLON> t2=Exp() {
	t = new ASTSeq(t, t2);
    })*
  { return t;}
}

ASTNode Exp() :
{ ASTNode t1, t2;
  Token op;}
{
  t1 = Clause() ((op=<AND> | op=<OR>) t2 = Clause() {
    	switch(op.kind) {
    	  case AND: t1 = new ASTAnd(t1, t2); break;
    	  case OR: t1 = new ASTOr(t1, t2); break;
    	  }
    })*
 { return t1;}
}

ASTNode Clause() :
{ ASTNode t;}
{
  t = EArithmetic() ( t=Comp(t) )?
  { return t; }
}

ASTNode Comp(ASTNode t1) :
{ Token op;
  ASTNode t2;}
{
  ( op=<D_EQ> | op=<N_EQ> | op=<GREATER> | op=<LOWER> | op=<GREATER_EQ> | op=<LOWER_EQ> ) t2=EArithmetic() {
    			switch(op.kind) {
    			  case D_EQ: t1 = new ASTEq(t1, t2); break;
    			  case N_EQ: t1 = new ASTNeq(t1, t2); break;
    			  case GREATER: t1 = new ASTGreater(t1, t2); break;
    			  case LOWER: t1 = new ASTLess(t1, t2); break;
    			  case GREATER_EQ: t1 = new ASTGreaterEq(t1, t2); break;
    			  case LOWER_EQ: t1 = new ASTLessEq(t1, t2); break;
    			  } }
  { return t1;}
}

ASTNode EArithmetic() :
{ Token op;
  ASTNode t1, t2;}
{
   t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=EArithmetic() {
    			if (op.kind == PLUS)
    				t1 = new ASTPlus(t1,t2);
                else
                	t1 = new ASTSub(t1,t2); })*
  { return t1;}
}

ASTNode Term() :
{
	Token op;
  	ASTNode t1, t2;
  	List<ASTNode> args;
}
{
  t1 = Fact() (
     <LPAR> args = ArgList() <RPAR> { t1 = new ASTApply(t1, args); }
  	| <ATTRIB> t2 = Exp() { t1 = new ASTAssign(t1, t2); }
  	| (( op=<TIMES> | op=<DIV> | op=<MOD> ) t2 = Fact() {
		switch(op.kind) {
		  case TIMES: t1 = new ASTMult(t1, t2); break;
		  case DIV: t1 = new ASTDiv(t1, t2); break;
		  case MOD: t1 = new ASTMod(t1, t2); break;
		  }
	} )*
  )
     { return t1; }
}

IType Type() :
{
    IType t;
    List<IType> paramTypes = new LinkedList<IType>();
}
{
    (
        <INT_TYPE>
        { return IntType.getInstance(); }
    |
        <BOOL_TYPE>
        { return BoolType.getInstance(); }
    |
        <REF_TYPE>
        t = Type()
        { return new RefType(t); }
    |
        <LPAR> ( t = Type() {paramTypes.add(t);} (<COMMA> t = Type() {paramTypes.add(t);})* )? <RPAR> t = Type()
        { return new FunType(paramTypes, t); }
    )
}

Entry<String, IType> TypeAssoc() :
{
    Token id;
    IType t;
}
{
    id = <ID> <D_DOTS> t = Type()
    { return new SimpleEntry<String, IType>(id.image, t); }
}

List<ASTNode> ArgList() :
{ ASTNode t;
  List<ASTNode> list = new LinkedList<ASTNode>();
}
{
  ( t=Exp() {list.add(t);} (<COMMA> t=Exp() {list.add(t);})* )?
  { return list;}
}

Map<Entry<String, IType>, ASTNode> Declarations() :
{ ASTNode t;
  Entry<String, IType> e;
  Map<Entry<String, IType>, ASTNode> decls = new HashMap<Entry<String, IType>, ASTNode>(); }
{
  ( e = TypeAssoc() <EQ> t=Exp() { decls.put(e, t);} )(<COMMA> e = TypeAssoc() <EQ> t=Exp() { decls.put(e, t);})*
  { return decls;}
}

List<Entry<String, IType>> ParamList() :
{ Entry<String, IType> e;
  List<Entry<String, IType>> list = new LinkedList<Entry<String, IType>>();
}
{
  ( e = TypeAssoc() {list.add(e);} (<COMMA> e = TypeAssoc() {list.add(e);})* )?
  { return list;}
}

ASTNode Fact() :
{ Token n;
  ASTNode t1, t2, t3;
  List<Entry<String, IType>> params;
  Map<Entry<String, IType>, ASTNode> decls;
}
{
    ( n=<Num> { t1 = new ASTNum(Integer.parseInt(n.image)); }
    | n=<ID> { t1 = new ASTId(n.image); }
    | n=<Bool> { t1 = new ASTBool(Boolean.parseBoolean(n.image)); }
    | <PRINT><LPAR> t1=Exp() <RPAR> { t1 = new ASTPrintln(t1); }
    | <LPAR> t1=Multiple_Exp() <RPAR>
    | <MINUS> t1=Fact() { t1 = new ASTNeg(t1); }
    | <NOT> t1=Fact() { t1 = new ASTNot(t1); }
    | <LET> decls = Declarations() <IN> t2=Multiple_Exp() <END> { t1 = new ASTLet(decls,t2); }
    | <FUN> params=ParamList() <R_ARROW> t2=Multiple_Exp() <END> { t1 = new ASTFun(params, t2); }
    | <NEW> t1=Fact() { t1 = new ASTNew(t1);}
	| <DERREF> t1=Fact() { t1 = new ASTDerref(t1); }
	| <IF> t1=Multiple_Exp() <THEN> t2=Multiple_Exp() <ELSE> t3=Multiple_Exp() <END> { t1 = new ASTIf(t1, t2, t3); }
	| <WHILE> t1=Multiple_Exp() <DO> t2=Multiple_Exp() <END> { t1 = new ASTWhile(t1, t2); }
	| <FOR><LPAR> decls = Declarations() <SEMI_COLON> t1=Exp() <SEMI_COLON> t2=Exp() <RPAR> <IN> t3=Multiple_Exp() <END>{ t1= new ASTFor(decls, t1, t2, t3); }
   )
   { return t1; }
}



