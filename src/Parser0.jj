PARSER_BEGIN(Parser)
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import ast.ASTAnd;
import ast.ASTApply;
import ast.ASTAssign;
import ast.ASTBool;
import ast.ASTDiv;
import ast.ASTEq;
import ast.ASTMult;
import ast.ASTNode;
import ast.ASTNot;
import ast.ASTNum;
import ast.ASTOr;
import ast.ASTPlus;
import ast.ASTSeq;
import ast.ASTSub;
import ast.ASTNeg;
import ast.ASTNeq;
import ast.ASTId;
import ast.ASTIf;
import ast.ASTLet;
import ast.ASTLess;
import ast.ASTLessEq;
import ast.ASTFun;
import ast.ASTGreater;
import ast.ASTGreaterEq;
import ast.ASTWhile;
import ast.ASTFor;
import ast.ASTDerref;
import ast.ASTNew;
import ivalues.IValue;
import environment.Environment;
import environment.EnvironmentClass;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
    try {
    Environment<IValue> globalEnv = new EnvironmentClass<IValue>();
    exp = parser.Start();
    System.out.println( exp.eval(globalEnv) );
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < LET : "let" >
  |
  < IN : "in" >
  |
  < END : "end" >
  |
  < FUN : "fun" >
  |
  < R_ARROW : "->" >
  |
  < COMMA : "," >
  |
  < D_EQ: "==" >
  |
  < EQ: "=" >
  |
  < ATTRIB : ":=" >
  |
  < NEW : "new" >
  |
  < DERREF : "!" >
  | 
  < N_EQ: "!=" >
  |
  < Bool: ("True" | "False") >
  |
  < IF : "if" >
  | 
  < THEN : "then" >
  |
  < ELSE : "else" >
  |
  < WHILE : "while" >
  |
  < DO : "do" >
  |
  < FOR : "for" >
  |
  < NOT : "~" >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  | 
  < GREATER_EQ : ">=" >
  |
  < LOWER_EQ : "<=" >
  |
  < LOWER : "<" >
  | 
  < GREATER : ">" >
  | 
  < D_DOTS : ":" >
  | 
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  | 
  < SEMI_COLON: ";" >
  |
  < EL: ";;" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Multiple_Exp() <EL>
   { return t; }
}

ASTNode Multiple_Exp():
{ ASTNode t, t2;}
{
  t = Exp() ( <SEMI_COLON> t2=Multiple_Exp() {
	t = new ASTSeq(t, t2);
    })*
  { return t;}
}

ASTNode Exp() :
{ ASTNode t1, t2;
  Token op;}
{
  t1 = Clause() ((op=<AND> | op=<OR>) t2 = Exp() {
    	switch(op.kind) {
    	  case AND: t1 = new ASTAnd(t1, t2); break;
    	  case OR: t1 = new ASTOr(t1, t2); break;
    	  }
    })*
 { return t1;}
}

ASTNode Clause() :
{ ASTNode t1, t2;}
{
 // t1 = EArithmetic() ( <D_EQ> t2=EArithmetic() { t1 = new ASTEq(t1, t2); } | <N_EQ> t2=EArithmetic() { t1 = new ASTNeq(t1, t2); } )?
 //	t = EArithmetic() | t = Comp()
 t1 = EArithmetic() ( t1=Comp(t1) )?
  { return t1; }
}

ASTNode Comp(ASTNode t1) :
{ Token op;
  ASTNode t2;}
{
  ( op=<D_EQ> | op=<N_EQ> | op=<GREATER> | op=<LOWER> | op=<GREATER_EQ> | op=<LOWER_EQ> ) t2=Clause() {
    			switch(op.kind) {
    			  case D_EQ: t1 = new ASTEq(t1, t2); break;
    			  case N_EQ: t1 = new ASTNeq(t1, t2); break;
    			  case GREATER: t1 = new ASTGreater(t1, t2); break;
    			  case LOWER: t1 = new ASTLess(t1, t2); break;
    			  case GREATER_EQ: t1 = new ASTGreaterEq(t1, t2); break;
    			  case LOWER_EQ: t1 = new ASTLessEq(t1, t2); break;
    			  } } 
  { return t1;}
}

ASTNode EArithmetic() :
{ Token op;
  ASTNode t1, t2;}
{
   t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=EArithmetic() {
    			if (op.kind == PLUS)
    				t1 = new ASTPlus(t1,t2);
                else
                	t1 = new ASTSub(t1,t2); })*
  { return t1;}
}

ASTNode Term() :
{
	Token op;
  	ASTNode t1, t2;
  	List<ASTNode> args;
}
{
  t1 = Fact() (
     <LPAR> args = ArgList() <RPAR> { t1 = new ASTApply(t1, args); }
  	| <ATTRIB> t2 = Multiple_Exp() { t1 = new ASTAssign(t1, t2); }
  	| (( op=<TIMES> | op=<DIV> ) t2 = Term() {
    if (op.kind == TIMES)
    	t1 = new ASTMult(t1, t2);
    else
    	t1 = new ASTDiv(t1, t2); } )*
  
  )
     { return t1; }
}

List<ASTNode> ArgList() :
{ ASTNode t;
  List<ASTNode> list = new LinkedList<ASTNode>();
  List<ASTNode> list2;}
{
  ( t=Multiple_Exp() {list.add(t);} (<COMMA> list2=ArgList() {list.addAll(list2);})* )?
  { return list;}
}

Map<String, ASTNode> EE() :
{ ASTNode t;
  Token id;
  Map<String, ASTNode> decls = new HashMap<String,ASTNode>(); }
{
  ( id=<ID> <EQ> t=Exp() { decls.put(id.image, t);} )(<COMMA> id=<ID> <EQ> t=Exp() { decls.put(id.image, t);})*
  { return decls;}
}

List<String> PL() :
{ Token id;
  List<String> list = new LinkedList<String>();
  List<String> list2;}
{
  ( id=<ID> {list.add(id.image);} (<COMMA> list2=PL() {list.addAll(list2);})* )?
  { return list;}
}

ASTNode Fact() :
{ Token n; 
  ASTNode t1, t2, t3;
  List<String> args;
  Map<String,ASTNode> decls;
}
{
    ( n=<Num> { t1 = new ASTNum(Integer.parseInt(n.image)); }
    | n=<ID> { t1 = new ASTId(n.image); }
    | n=<Bool> { t1 = new ASTBool(Boolean.parseBoolean(n.image)); }
    | <LPAR> t1=Exp() <RPAR>
    | <MINUS> t1=Fact() { t1 = new ASTNeg(t1); }
    | <NOT> t1=Fact() { t1 = new ASTNot(t1); }
    | <LET> decls = EE() <IN> t2=Multiple_Exp() <END> { t1 = new ASTLet(decls,t2); }
    | <FUN> args=PL() <R_ARROW> t2=Multiple_Exp() <END> { t1 = new ASTFun(args, t2); }
    | <NEW> t1=Exp() { t1 = new ASTNew(t1);}
	| <DERREF> t1=Fact() { t1 = new ASTDerref(t1); }
	| <IF> t1=Multiple_Exp() <THEN> t2=Multiple_Exp() <ELSE> t3=Multiple_Exp() <END> { t1 = new ASTIf(t1, t2, t3); } 
	| <WHILE> t1=Multiple_Exp() <DO> t2=Multiple_Exp() <END> { t1 = new ASTWhile(t1, t2); }
	| <FOR><LPAR> decls = EE() <SEMI_COLON> t1=Exp() <SEMI_COLON> t2=Exp() <RPAR> <IN> t3=Multiple_Exp() <END>{ t1= new ASTFor(decls, t1, t2, t3); }
   )
   { return t1; }
}



